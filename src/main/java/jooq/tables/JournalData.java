/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.List;

import jooq.DefaultSchema;
import jooq.Keys;
import jooq.tables.records.JournalDataRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JournalData extends TableImpl<JournalDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>journal_data</code>
     */
    public static final JournalData JOURNAL_DATA = new JournalData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JournalDataRecord> getRecordType() {
        return JournalDataRecord.class;
    }

    /**
     * The column <code>journal_data.note_id</code>.
     */
    public final TableField<JournalDataRecord, Integer> NOTE_ID = createField(DSL.name("note_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>journal_data.date</code>.
     */
    public final TableField<JournalDataRecord, String> DATE = createField(DSL.name("date"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>journal_data.day</code>.
     */
    public final TableField<JournalDataRecord, Integer> DAY = createField(DSL.name("day"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>journal_data.title</code>.
     */
    public final TableField<JournalDataRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>journal_data.mood</code>.
     */
    public final TableField<JournalDataRecord, String> MOOD = createField(DSL.name("mood"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>journal_data.activity</code>.
     */
    public final TableField<JournalDataRecord, String> ACTIVITY = createField(DSL.name("activity"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>journal_data.health</code>.
     */
    public final TableField<JournalDataRecord, String> HEALTH = createField(DSL.name("health"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>journal_data.note</code>.
     */
    public final TableField<JournalDataRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.CLOB, this, "");

    private JournalData(Name alias, Table<JournalDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private JournalData(Name alias, Table<JournalDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>journal_data</code> table reference
     */
    public JournalData(String alias) {
        this(DSL.name(alias), JOURNAL_DATA);
    }

    /**
     * Create an aliased <code>journal_data</code> table reference
     */
    public JournalData(Name alias) {
        this(alias, JOURNAL_DATA);
    }

    /**
     * Create a <code>journal_data</code> table reference
     */
    public JournalData() {
        this(DSL.name("journal_data"), null);
    }

    public <O extends Record> JournalData(Table<O> child, ForeignKey<O, JournalDataRecord> key) {
        super(child, key, JOURNAL_DATA);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<JournalDataRecord, Integer> getIdentity() {
        return (Identity<JournalDataRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JournalDataRecord> getPrimaryKey() {
        return Keys.PK_JOURNAL_DATA;
    }

    @Override
    public List<UniqueKey<JournalDataRecord>> getKeys() {
        return Arrays.<UniqueKey<JournalDataRecord>>asList(Keys.PK_JOURNAL_DATA, Keys.SQLITE_AUTOINDEX_JOURNAL_DATA_1, Keys.SQLITE_AUTOINDEX_JOURNAL_DATA_2);
    }

    @Override
    public JournalData as(String alias) {
        return new JournalData(DSL.name(alias), this);
    }

    @Override
    public JournalData as(Name alias) {
        return new JournalData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JournalData rename(String name) {
        return new JournalData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JournalData rename(Name name) {
        return new JournalData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, Integer, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
